from celery.task.sets import TaskSet
from celery import chain
import tasks
from sqlalchemy.orm import sessionmaker
from models import *
from sqlalchemy import create_engine
NUM_CALCS = [10**5, 10**6, 10**7]
from taskMeta import *



def makeDownloadTask():
    engine = create_engine('sqlite:///'+ cur_dir +'/data.db', echo=False)
    Session = sessionmaker(bind=engine)
    session = Session()
    schedule = session.query(Schedule).filter_by(id=1).first()
    print schedule
    print schedule.last_movie_id
    movie = session.query(Movie).filter_by(id=(schedule.last_movie_id+1)).first()
    sdUrl =  movie.movie_url_sd.replace("942bnbnz4z951b21369938383","m6g099m3j54f14h1371390444")
    taskMeta = TaskMeta(movie.id, State.DOWNLOADING, None)
    return tasks.download_task.s(sdUrl, "/home/vertusd/", taskMeta)

def makeCompressTask():
    return tasks.compress_task.s()

def makeUploadTask():
    return tasks.upload_task.s()

def makeUpdateDBTask():
    return tasks.update_database.s()

def makeUpdateBlogTask():
    return tasks.update_blog.s()

def makeTasks():
    taskchain = chain(makeDownloadTask(), makeCompressTask(), makeUploadTask(), makeUpdateDBTask(), makeUpdateBlogTask()).apply_async()
    print "Dispatching tasks"
    results = list(taskchain.collect())
    print "Waiting for results"
    #results = taskchain.get()
    print "Results:"
    print results


def make_pi_tasks():

    taskset = TaskSet(tasks.make_pi.subtask((x, )) for x in NUM_CALCS)
    print "Dispatching tasks"
    taskset_result = taskset.apply_async()

    print "Waiting for results"
    results = taskset_result.join_native()
    print "Results:"
    print result


if __name__ == '__main__':
    print "Making pi"
    makeTasks()
